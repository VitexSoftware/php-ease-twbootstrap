<?php

declare(strict_types=1);

/**
 * This file is part of the EaseTWBootstrap3 package
 *
 * https://github.com/VitexSoftware/php-ease-twbootstrap
 *
 * (c) Vítězslav Dvořák <http://vitexsoftware.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test\Ease\TWB;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-17 at 23:59:31.
 */
class NavbarTest extends \Test\Ease\Html\DivTagTest
{
    public string $rendered = '<nav class="navbar navbar-default" role="navigation" name="Navbar"><div class="navbar-inner"><div class="navbar-header"><button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-Navbar-collapse"><span class="sr-only">Switch navigation</span><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button></div><div class="collapse navbar-collapse navbar-Navbar-collapse"><ul class="nav navbar-nav"></ul><div class="pull-right"><ul class="nav navbar-nav nav-right"></ul></div></div></div></nav>';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new \Ease\TWB\Navbar('Navbar');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    public function testConstructor(): void
    {
        $classname = \get_class($this->object);

        // Get mock, without the constructor being called
        $mock = $this->getMockBuilder($classname)
            ->disableOriginalConstructor()
            ->getMockForAbstractClass();
        $mock->__construct('Name');

        $mock->__construct('Name', 'Brand', ['class' => 'test']);
    }

    /**
     * @covers \Ease\TWB\Navbar::NavBarHeader
     */
    public function testNavBarHeader(): void
    {
        $this->assertEquals('', (string) \Ease\TWB\Navbar::navBarHeader('handle', 'brand'));
    }

    /**
     * @covers \Ease\TWB\Navbar::addItem
     *
     * @todo   Implement testAddItem().
     */
    public function testAddItem(): void
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.',
        );
    }

    /**
     * @covers \Ease\TWB\Navbar::addMenuItem
     *
     * @todo   Implement testAddMenuItem().
     */
    public function testAddMenuItem(): void
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.',
        );
    }

    /**
     * @covers \Ease\TWB\Navbar::addDropDownSubmenu
     *
     * @todo   Implement testAddDropDownSubmenu().
     */
    public function testAddDropDownSubmenu(): void
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.',
        );
    }

    /**
     * @covers \Ease\TWB\Navbar::addDropDownMenu
     *
     * @todo   Implement testAddDropDownMenu().
     */
    public function testAddDropDownMenu(): void
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.',
        );
    }

    /**
     * @covers \Ease\TWB\Navbar::isEmpty
     */
    public function testIsEmpty(): void
    {
        $this->object->emptyContents();
        $this->assertTrue($this->object->isEmpty());
        $this->object->addItem('@');
        $this->assertTrue($this->object->isEmpty($this->object));
    }

    /**
     * @covers \Ease\TWB\Navbar::getItemsCount
     */
    public function testGetItemsCount(): void
    {
        $this->object->emptyContents();
        $this->assertEquals(0, $this->object->getItemsCount());
        $this->object->addItem('@');
        $this->assertEquals(0, $this->object->getItemsCount());
        $this->assertEquals(
            2,
            $this->object->getItemsCount(new \Ease\Html\DivTag(['a', 'b'])),
        );
    }

    /**
     * @covers \Ease\TWB\Navbar::getTagName
     */
    public function testGetTagName(): void
    {
        $this->assertEquals('Navbar', $this->object->getTagName());
    }
}
